if (!partition){
    println("no partition set")
    partition = ""
}

Closure get_partition;
if (partition instanceof Closure){
    get_partition = partition
}else{
    get_partition = { t -> partition }
}

Closure cacheDir;
if (params.cache_dir){
    cacheDir = { f ->
                    def d = new File("$params.cache_dir/$f")
                    d.mkdirs()
                    "$params.cache_dir/$f"
               }
}else{
    cacheDir = { f -> "" }
}

process {

    withLabel: freesurfer{ container = "${freesurfer}" }
    withLabel: rtms{
        container ="${rtms}"
        containerOptions = "-B ${params.bin}:/scripts" }

    withLabel: gmsh4{ container ="${rtms}" }
    withLabel: ciftify { container = "${ciftify}" }
    withLabel: connectome{
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        container = "${connectome}"
        beforeScript = "export SINGULARITYENV_OMP_NUM_THREADS=1"
        containerOptions = "-B ${params.atlas}:/atlas -B ${msm}:/msm_conf"
    }

    // CIFTI MESHING
    withName: fmriprep_anat{
        executor = "${engine}"
        time = "12:00:00"
        cpus = 8
        queue = {get_partition(task.time)}
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        storeDir = cacheDir("fmriprep_anat")
        scratch = true
    }

    withName: run_fmriprep{
        executor = "${engine}"
        time = "48:00:00"
        cpus = 36
        queue = {get_partition(task.time)}
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        storeDir = cacheDir("run_fmriprep")
        scratch = true

    }

    withName: ciftify{
        executor = "${engine}"
        time = "24:00:00"
        cpus = 8
        queue = {get_partition(task.time)}
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        storeDir = cacheDir("ciftify")
        cache = "lenient"
        scratch = true
    }

    withName: mri2mesh{
        executor = "${engine}"
        time = "24:00:00"
        cpus = 8
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        queue = {get_partition(task.time)}
        containerOptions = "-B ${params.license}:/license"
        container = "${simnibs}"
        storeDir = cacheDir("mri2mesh")
        scratch = true
    }

    withName: update_msh{
        executor = "${engine}"
        time = "5:00:00"
        cpus = 4
        maxForks = 10
        queue = {get_partition(task.time)}
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        storeDir = cacheDir("update_msh")
    }

    withName: clean_img{
        executor = "${engine}"
        time = "00:25:00"
        cpus = 1
        maxForks = 10
        queue = {get_partition(task.time)}
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        storeDir = cacheDir("clean_img")
    }

    // MSHBM
    withName: generate_parcellation{
        time = "00:25:00"
        cpus = 1
        maxForks = 1
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        storeDir = cacheDir("generate_parcellation")
    }

    withName: select_mshbm_roi{
        storeDir = cacheDir("select_mshbm_roi")
    }

    //

    // REGISTRATION
    withName: msm_sulc{
        errorStrategy = {task.attempt == 3 ? "finish": "retry"}
        executor= "${engine}"
        queue = {get_partition(task.time)}
        time = "3:00:00"
        cpus = params.num_cpus
        storeDir = cacheDir("msm_sulc")
    }

    withName: centroid_project2vol{
        errorStrategy = {task.attempt == 3 ? "finish": "retry"}
        executor= "${engine}"
        queue = {get_partition(task.time)}
        time = "0:25:00"
        cpus = params.num_cpus
        storeDir = cacheDir("centroid_project2vol")
    }

    withName: project_mask2surf{
        errorStrategy = {task.attempt == 3 ? "finish": "retry"}
        executor= "${engine}"
        queue = {get_partition(task.time)}
        time = "0:25:00"
        cpus = params.num_cpus
        storeDir = cacheDir("project_mask2surf")
    }

    // WEIGHTFUNC
    withName: smooth_img{
        executor = "${engine}"
        queue = {get_partition(task.time)}
        time = "1:00:00"
        cpus = params.num_cpus
        storeDir = cacheDir("cifti_smooth")
    }

    // Mentalizing Weight Function
    withName: calculate_roi_correlation{
        storeDir = cacheDir("calculate_roi_correlation")
    }

    withName: make_symmetric_dscalar{
        storeDir = cacheDir("make_symmetric_dscalar")
    }

    withName: weightfunc_mask{
        storeDir = cacheDir("weightfunc_mask")
    }

    withName: dilate_mask{
        storeDir = cacheDir("dilate_mask")
    }

    withName: threshold_weightfunc{
        storeDir = cacheDir("threshold_weightfunc")
    }

    // PROJECTION AND OPTIMIZATION
    withName: "tet_project_weightfunc_wf:tetrahedral_projection"{
        executor = "${engine}"
        time = "5:00:00"
        cpus = params.num_cpus
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        storeDir = cacheDir("tetrahedral_projection")
        queue = {get_partition(task.time)}
    }

    withName: "tet_project_roi_wf:tetrahedral_projection"{
        executor = "${engine}"
        time = "5:00:00"
        cpus = params.num_cpus
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        storeDir = cacheDir("tetrahedral_roi_projection")
        queue = {get_partition(task.time)}
    }

    withName: tet_project2vol{
        errorStrategy = {task.attempt == 3 ? "finish": "retry"}
        executor= "${engine}"
        queue = {get_partition(task.time)}
        time = "0:25:00"
        cpus = params.num_cpus
        storeDir = cacheDir("te_project2vol")
    }

    withName: join_surface_coordinates {
        cache = false
        storeDir = cacheDir("join_surface_coordinates")
    }

    withName: average_coordinate{
        cache = false
    }

    withName: calculate_distance{
        cache = false
    }

    withName: "get_cortical_distance_masked"{
        executor = "${engine}"
        queue = {get_partition(task.time)}
        cpus=4
        storeDir = cacheDir("get_cortical_distance_masked")
        clusterOptions = "--mem-per-cpu=2G"
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
    }

    withName: "get_cortical_distance"{
        executor = "${engine}"
        queue = {get_partition(task.time)}
        cpus=4
        storeDir = cacheDir("get_coil_cortical_distance")
        clusterOptions = "--mem-per-cpu=2G"
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
    }

    withName: optimize_coil{
        executor = "${engine}"
        time = "12:00:00"
        cpus = 32
        queue = {get_partition(task.time)}
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        storeDir = cacheDir("optimize_coil")
        maxForks = 5
        scratch = true
    }

    withName: evaluate_fem{
        executor = "${engine}"
        time = "00:20:00"
        cpus=4
        queue = {get_partition(task.time)}
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        storeDir = cacheDir("evaluate_fem")
    }

    withName: create_surface_view{
        cpus = 1
        storeDir = cacheDir("qc_imgs")
    }

    withName: "resamplesulc_wf:recombine"{
        storeDir = cacheDir("sulcmap_resampled")
        cache = false
    }


    withName: publish_boonstim{
        maxForks = 1
        cache = false
    }

    withName: get_ratio{
        storeDir = cacheDir("get_ratio")
        maxForks = 4
    }

    withName: qc_cortical_distance{
        storeDir = cacheDir("qc_cortical_distance")
        containerOptions = "-B ${params.geo}:/geo -B ${params.bin}:/scripts"
        executor = "${engine}"
        time = "01:00:00"
        queue = {get_partition(task.time)}
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        clusterOptions = "--mem-per-cpu=2G"
        cpus = 4
    }

    withName: get_scalp_seed{
        storeDir = cacheDir("get_scalp_seed")
        containerOptions = "-B ${params.bin}:/scripts"
        executor = "${engine}"
        time = "01:00:00"
        queue = {get_partition(task.time)}
        //errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        clusterOptions = "--mem-per-cpu=2G"
        cpus = 6
    }

    withName: qc_parameteric_surf{
        storeDir = cacheDir("qc_parameteric_surf")
        containerOptions = "-B ${params.bin}:/scripts"
        executor = "${engine}"
        time = "00:20:00"
        queue = {get_partition(task.time)}
        cpus=2
    }

    withName: get_stokes_cf{
        storeDir = cacheDir("get_stokes_cf")
    }

    // DEBUGGING
    withName: convert_fs2gifti{
        storeDir = cacheDir("convert_fs2gifti")
    }

    withName: calculate_reference_field_wf{
        cache = false
    }

    withName: join_distmaps{
        storeDir = cacheDir("join_distmaps")
    }

    withName: dilate_mt_roi{
        storeDir = cacheDir("dilate_mt_roi")
        time = "00:20:00"
        queue = {get_partition(task.time)}
        errorStrategy = {task.attempt == 3 ? "finish" : "retry"}
        cpus = 4
        maxForks = 4
    }

    withName: apply_precentral{
        storeDir = cacheDir("apply_precentral")
    }

    withName: compute_weighted_centroid{
        storeDir = cacheDir("compute_weighted_centroid")
    }

    withName: create_surface_html{
        storeDir = cacheDir("create_surface_html")
    }

    withName: brainsight_transform{
        storeDir = cacheDir("brainsight_transform")
    }

    withName: localite_transform{
        storeDir = cacheDir("localite_transform")
    }

    withName: 'publish_*'{
        cache = false
    }
}

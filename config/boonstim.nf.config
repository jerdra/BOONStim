import nextflow.util.Duration

singularity {
    autoMounts=true
    enabled=true
}

// Partition assignment functions
def get_queue(w, mapping){
    def td_mapping = mapping.collectEntries{k,v -> [new Duration(k), v]}
    def ps = td_mapping.grep{it.key >= w}.sort{it.key}
    return ps.first().value
}


// Repository paths
repo = "/projects/jjeyachandra/BOONStim/"
bin = "${repo}/bin"
resources = "${repo}/resources"
atlas = "${repo}/resources/templates/"
msm = "${repo}/resources/msm_conf/"
zz_templates = "${repo}/resources/zz_templates/"
geo_templates = "${repo}/resources/geo_templates/"
configDir = "${repo}/config"

// Mapping to various optimization strategies
optimization_map = [
    "bayesian": "${repo}/modules/bayes_opt.nf",
    "grid": "${repo}/modules/grid_opt.nf",
    "particle_swarm": "${repo}/modules/particle_opt.nf"
]

optimization_config_map = [
    "bayesian": "${configDir}/bayes_opt.nf.config",
    "grid": "${configDir}/grid_opt.nf.config",
    "particle_swarm": ""
]

params.method = "bayesian"
params.optimization_module = optimization_map["${params.method}"]

// Coil to use for stimulations (.ccd or .nii.gz dA/dt)
coil = "/projects/jjeyachandra/simnibs/ccd-files/Magstim_70mm_Fig8.nii.gz"

// Ciftify image and boutiques jsons
ciftify = "/archive/code/containers/FMRIPREP_CIFTIFY/tigrlab_fmriprep_ciftify_1.3.0.post2-2.3.1-2019-04-04-8ebe3500bebf.img"
ciftify_invocation = "${repo}/resources/invocations/fmriprep_ciftify-1.3.0.post2-2.3.1_invocation.json"
ciftify_descriptor = "${repo}/resources/invocations/fmriprep_ciftify-1.3.0.post2-2.3.1.json"

// fMRIPrep image and boutiques jsons
fmriprep = "/archive/code/containers/FMRIPREP/poldracklab_fmriprep_1.3.2-2019-03-18-573e99cc5d39.simg"
fmriprep_invocation="${repo}/resources/invocations/fmriprep-20.2.0_invocation.json"
anat_invocation = "${repo}/resources/invocations/fmriprep_anat_wf.json"
anat_descriptor = "/projects/jjeyachandra/boutiques_jsons/descriptors/fmriprep-1.3.2.json"

// Image containing freesurfer software
freesurfer = "${repo}/containers/freesurfer_6.0.1/freesurfer_expert_6.0.1.simg"
license = "/opt/quarantine/freesurfer/6.0.0/build/"

// Images provided in repository Dockerfiles
rtms =  "${repo}/containers/rtms_bayesian/boonstim-dev.simg"
simnibs = "${repo}/containers/simnibs_3.0/mri2mesh_v3.0_v0.2-2019-06-24-1dfbbefb361d.simg"
connectome = "${repo}/containers/connectome_workbench/connectome_workbench_v1.0-2019-06-05-bbdb3be76afe.simg"

// runtime specifications
// Maximum number of CPUS to use
params.num_cpus = 8

// Set params
params.bin = "${bin}"
params.coil = "${coil}"
params.zz = "${zz_templates}"
params.geo = "${geo_templates}"
params.ciftify = "${ciftify}"
params.ciftify_invocation = "${ciftify_invocation}"
params.ciftify_descriptor = "${ciftify_descriptor}"
params.fmriprep = "${fmriprep}"
params.fmriprep_invocation = "${fmriprep_invocation}"
params.anat_invocation = "${anat_invocation}"
params.anat_descriptor = "${anat_descriptor}"
params.license = "${license}"
params.cache_dir = null
params.atlas = "${atlas}"

// Left hand-MT coordinate
params.ref_coords = [
                    ["left_knob", -42, -16, 68],
                    ["right_knob", 42, -16, 68]
                   ]
params.ref_dist=12

profiles {
    scc {
        // Queue specification
        pmap = ["12:00:00": "short",
                "1:00:00:00": "medium",
                "2:00:00:00": "long",
                "166:00:00:00": "verylong"]
        partition = { t -> get_queue(t, pmap) }
        engine = 'SLURM'

        // Paths need to be overrided for SCC specification
        scc_base = "/KIMEL/tigrlab/"

        freesurfer = "${scc_base}/${freesurfer}"
        connectome = "${scc_base}/${connectome}"
        simnibs = "${scc_base}/${simnibs}"
        msm = "${scc_base}/${msm}"

        params.bin = "${scc_base}/${bin}"
        params.coil = "${scc_base}/${coil}"
        params.zz = "${scc_base}/${zz_templates}"
        params.geo = "${scc_base}/${geo}"
        params.ciftify = "${scc_base}/${ciftify}"
        params.ciftify_invocation = "${scc_base}/${ciftify_invocation}"
        params.ciftify_descriptor = "${scc_base}/${ciftify_descriptor}"
        params.fmriprep = "${scc_base}/${fmriprep}"
        params.anat_invocation = "${scc_base}/${anat_invocation}"
        params.anat_descriptor = "${scc_base}/${anat_descriptor}"
        params.license = "/KIMEL/tigrlab/quarantine/freesurfer/6.0.0/build"
        params.weightworkflow = "${scc_base}/${params.weightworkflow}"
        params.atlas = "${scc_base}/${atlas}"

        // Appends scc base if params.cache_dir specified
        params.cache_dir = { (params.cache_dir) ? "${scc_base}/$params.cache_dir" : null }()
        includeConfig "${scc_base}/${configDir}/processes.nf.config"
        includeConfig "${scc_base}/" + optimization_config_map["${params.method}"]
    }

    local {
        partition = "local"
        engine = 'local'
        includeConfig "${configDir}/processes.nf.config"
        includeConfig optimization_config_map["${params.method}"]
    }

    kimel {
        partition = "high-moby"
        engine = 'SLURM'
        includeConfig "${configDir}/processes.nf.config"
        includeConfig optimization_config_map["${params.method}"]
    }
}

